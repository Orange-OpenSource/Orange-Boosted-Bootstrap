---
import fs from 'node:fs'
import path from 'node:path'
import { Prism } from '@astrojs/prism'
import { getVersionedDocsPath } from '@libs/path'

interface Props {
  /**
   * The CSS class(es) to be added to the `pre` HTML element when rendering code blocks in Markdown.
   * Note that this prop is not used when the component is invoked directly.
   */
  class?: string
  /**
   * The code to highlight.
   * If an array is passed, elements will be joined with a new line.
   */
  code?: string | string[]
  /**
   * The CSS class(es) to be added to the `div` wrapper HTML element.
   */
  containerClass?: string
  /**
   * The language to use for highlighting.
   * @see https://prismjs.com/#supported-languages
   */
  lang?: string
  /**
   * If the `filePath` prop is defined, this prop can be used to specify a regex containing a match group to extract
   * only a part of the file.
   */
  fileMatch?: string
  /**
   * A path to the file containing the code to highlight relative to the root of the repository.
   * This takes precedence over the `code` prop.
   */
  filePath?: string
  /**
   * Defines if the `<Code>` component is nested inside an `<Example>` component or not.
   * @default false
   */
  nestedInExample?: boolean
  /**
   * Defines label to complete 'Edit code on Stackblitz' and/or 'Copy code to clipboard' buttons labels.
   */
  buttonLabel?: string
}

const { class: className, code, containerClass, fileMatch, filePath, lang, nestedInExample = false, buttonLabel } = Astro.props

const clipboardLabel = buttonLabel ? `Copy ${buttonLabel} code to clipboard` : 'Copy code to clipboard'

let codeToDisplay = filePath
  ? fs.readFileSync(path.join(process.cwd(), filePath), 'utf8')
  : Array.isArray(code)
    ? code.join('\n')
    : code

if (filePath && fileMatch && codeToDisplay) {
  const match = codeToDisplay.match(new RegExp(fileMatch))

  if (!match || !match[0]) {
    throw new Error(`The file at ${filePath} does not contains a match for the regex '${fileMatch}'.`)
  }

  codeToDisplay = match[0]
}
---

<script>
  import ClipboardJS from 'clipboard'

  function snippetButtonTooltip(selector: string, tooltipLabel: string) {
    document.querySelectorAll(selector).forEach((btn) => {
      oudsWeb.Tooltip.getOrCreateInstance(btn, { title: tooltipLabel })
    })
  }

  snippetButtonTooltip('.btn-clipboard', 'Copy to clipboard')
  snippetButtonTooltip('.btn-edit', 'Edit on StackBlitz')

  const clipboard = new ClipboardJS('.btn-clipboard', {
    target: (trigger) => trigger.closest('.bd-code-snippet')?.querySelector('.highlight')!,
    text: (trigger) => {
      // Trim text to workaround a Firefox issue where the structure of the DOM (uncontrolled) is relevant for the
      // copied text.
      // https://github.com/zenorocha/clipboard.js/issues/439#issuecomment-312344621
      return trigger.closest('.bd-code-snippet')?.querySelector('.highlight')!.textContent?.trim()!
    }
  })

  clipboard.on('success', (event) => {
    const iconFirstChild = event.trigger.querySelector('.bi')?.firstElementChild
    const tooltipBtn = oudsWeb.Tooltip.getInstance(event.trigger)
    const namespace = 'http://www.w3.org/1999/xlink'
    const originalXhref = iconFirstChild?.getAttributeNS(namespace, 'href')
    const initialTooltipInner = tooltipBtn?.tip?.querySelector('.tooltip-inner')?.innerHTML
    const isCheckIconVisible = originalXhref?.includes('#check2') || false

    if (isCheckIconVisible) {
      return
    }

    tooltipBtn?.setContent({ '.tooltip-inner': 'Copied!' })

    event.trigger.addEventListener(
      'hidden.bs.tooltip',
      () => {
        tooltipBtn?.setContent({ '.tooltip-inner': initialTooltipInner })
      },
      { once: true }
    )

    event.clearSelection()

    if (originalXhref) {
      iconFirstChild?.setAttributeNS(namespace, 'href', originalXhref.replace('clipboard', 'check2'))
    }

    setTimeout(() => {
      if (originalXhref) {
        iconFirstChild?.setAttributeNS(namespace, 'href', originalXhref)
      }
    }, 2000)
  })

  clipboard.on('error', (event) => {
    const modifierKey = /mac/i.test(navigator.userAgent) ? '\u2318' : 'Ctrl-'
    const fallbackMsg = `Press ${modifierKey}C to copy`
    const tooltipBtn = oudsWeb.Tooltip.getInstance(event.trigger)
    const initialTooltipInner = tooltipBtn?.tip?.querySelector('.tooltip-inner')?.innerHTML

    tooltipBtn?.setContent({ '.tooltip-inner': fallbackMsg })

    event.trigger.addEventListener(
      'hidden.bs.tooltip',
      () => {
        tooltipBtn?.setContent({ '.tooltip-inner': initialTooltipInner })
      },
      { once: true }
    )
  })
</script>

<div class:list={[{ 'bd-code-snippet': !nestedInExample }, containerClass, 'highlight-container']}>
  {Astro.slots.has('bar') ? <slot name="bar" /> : null}
  <div class:list={['highlight', { 'pe-md-4xl': !nestedInExample }]}>
    {
      codeToDisplay && lang ? (
        <Prism code={codeToDisplay} lang={lang} />
      ) : (
        /* prettier-ignore */ <pre class={className}><slot /></pre>
      )
    }
  </div>
  {
    nestedInExample
      ? (<></>)
      : Astro.slots.has('pre')
        ? (
          <slot name="pre" />
        )
        : (
          <div class="bd-clipboard">
            <button type="button" class="btn btn-minimal btn-icon btn-clipboard m-2xs" title={clipboardLabel}>
              <svg aria-hidden="true">
                <use xlink:href={getVersionedDocsPath('/assets/img/ouds-web-sprite.svg#copy')} />
              </svg>
            </button>
          </div>
        )
  }
</div>
