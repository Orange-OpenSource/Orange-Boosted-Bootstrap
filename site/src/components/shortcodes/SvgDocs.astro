---
import fs from 'node:fs'
import Code from '@shortcodes/Code.astro'
import { getConfig } from '@libs/config'

/**
 * Prints SVG content.
 **/
interface Props {
  /**
   * File path to the SVG file without file extension.
   * @default "brand-logo"
   */
  file?: string

  /**
   * Specify whether the SVG file is downloadable.
   * @default true
   */
  downloadable?: boolean
}

const { file = `${getConfig().brand}-logo`, downloadable = true } = Astro.props

const filePath = `site/${getConfig().brand}/static/docs/[version]/assets/brand/${file}`
const svgFormattedPath = `${filePath}-formatted.svg`
const svgPath = `${filePath}.svg`

const svg = fs.readFileSync(svgPath, 'utf8')
const size = fs.statSync(svgPath).size
---

<Code filePath={svgFormattedPath} lang="html">
  <div slot="pre" class="bd-clipboard">
    <div class="d-flex ms-auto">
      <button type="button" class="btn btn-minimal btn-icon btn-clipboard m-2xs" title="Copy to clipboard">
        <svg class="bi" aria-hidden="true"><use xlink:href="#copy"></use></svg>
      </button>
    </div>
  </div>
</Code>
{
  downloadable && (
    <p class="ms-auto text-end">
      <a
        class="btn btn-strong"
        href={`data:image/svg+xml,${svg
          .replaceAll('#', '%23')
          .replaceAll('<', '%3c')
          .replaceAll('>', '%3e')
          .replaceAll('(', '%28')
          .replaceAll(')', '%29')
          .replaceAll(' ', '%20')
          .replaceAll('"', "'")
          .replaceAll('{', '%7B')
          .replaceAll('}', '%7D')}`}
        download={`${file}.svg`}
      >
        Download<span class="small ms-2xs">(SVG, {size / 1000}ko)</span>
      </a>
    </p>
  )
}
