---
import type { CollectionEntry } from 'astro:content'
import { getConfig } from '@libs/config'
import type { Layout } from '@libs/layout'
import { getVersionedDocsPath } from '@libs/path'

interface Props {
  addedIn?: CollectionEntry<'docs'>['data']['added']
  layout: Layout
}

const { layout } = Astro.props
const { slug, version } = Astro.params

const isHome = Astro.url.pathname === '/'

let versionsLink = ''

if (layout === 'docs' && version === getConfig().docs_version) {
  versionsLink = `${slug}/`
} else if (layout === 'single' && Astro.url.pathname.startsWith(getVersionedDocsPath(''))) {
  versionsLink = Astro.url.pathname.replace(getVersionedDocsPath(''), '')
}
---

<li class="nav-item dropdown">
  <button
    type="button"
    class="nav-link nav-icon dropdown-toggle"
    data-bs-toggle="dropdown"
    aria-expanded="false"
    data-bs-display="static"
  >
    <span class="d-lg-none" aria-hidden="true">OUDS Web</span><span class="visually-hidden">OUDS Web&nbsp;</span> v{
      getConfig().docs_version
    }
    <span class="visually-hidden">(switch to other versions)</span>
  </button>
  <ul class="dropdown-menu dropdown-menu-end mb-sm mb-lg-none">
    <li><h6 class="dropdown-header">v0 releases</h6></li>
    <li>
      <a
        class="dropdown-item d-flex align-items-center justify-content-between active"
        aria-current="true"
        href={isHome ? `/${getConfig().brand}/` : `/${getConfig().brand}/docs/${getConfig().docs_version}/${versionsLink}`}
      >
        Latest ({getConfig().docs_version}.x)
        <svg class="bi" aria-hidden="true"><use xlink:href={getVersionedDocsPath('/assets/img/ouds-web-sprite.svg#check2')}></use></svg>
      </a>
    </li>
    <li><hr class="dropdown-divider" /></li>
    <li><a class="dropdown-item" href={`/${getConfig().brand}/docs/versions/`}>All versions</a></li>
  </ul>
</li>
