// stylelint-disable selector-no-qualifying-type, selector-max-type, selector-max-compound-selectors, selector-max-combinators
.bullet-list {
  --#{$prefix}bullet-list-padding-block: #{$ouds-bullet-list-space-padding-block-body-large};
  --#{$prefix}bullet-list-icon-container-width: var(--#{$prefix}icon-md-with-body-large);
  --#{$prefix}bullet-list-icon-size: var(--#{$prefix}icon-sm-with-body-large);
  --#{$prefix}bullet-list-fixed-left-padding: calc(var(--#{$prefix}bullet-list-icon-container-width) + #{px-to-rem($ouds-bullet-list-space-column-gap-body-large)}); // stylelint-disable-line function-disallowed-list
  --#{$prefix}bullet-list-marker-left: #{px-to-rem($ouds-bullet-list-space-padding-inline-level-0)};

  padding-left: 0;
  font-weight: $ouds-font-weight-system-strong;
  list-style-type: "";
  @include get-font-size("body-large");

  &.fs-bm ul,
  &.fs-bm ol {
    --#{$prefix}bullet-list-padding-block: #{$ouds-bullet-list-space-padding-block-body-medium};
    --#{$prefix}bullet-list-icon-container-width: var(--#{$prefix}icon-md-with-body-medium);
    --#{$prefix}bullet-list-icon-size: var(--#{$prefix}icon-sm-with-body-medium);
    --#{$prefix}bullet-list-fixed-left-padding: calc(var(--#{$prefix}bullet-list-icon-container-width) + #{px-to-rem($ouds-bullet-list-space-column-gap-body-medium)}); // stylelint-disable-line function-disallowed-list
    @include get-font-size("body-medium");
  }

  &.fw-normal li {
    font-weight: $ouds-font-weight-system-default;
  }

  li {
    position: relative;
    box-sizing: content-box;
    padding: var(--#{$prefix}bullet-list-padding-block) 0;
    padding-left: calc(var(--#{$prefix}bullet-list-fixed-left-padding) + #{px-to-rem($ouds-bullet-list-space-padding-inline-level-0)}); // stylelint-disable-line function-disallowed-list

    &::before {
      position: absolute;
      top: var(--#{$prefix}bullet-list-padding-block);
      left: var(--#{$prefix}bullet-list-marker-left);
      width: var(--#{$prefix}bullet-list-icon-container-width);
      height: 1lh;
      @supports not (height: 1lh) {
        height: var(--#{$prefix}bullet-list-icon-container-width);
      }
      content: "";
    }

    ol,
    ul {
      padding-left: 0;
      margin-top: var(--#{$prefix}bullet-list-padding-block);
      list-style-type: "";
    }

    li {
      --#{$prefix}bullet-list-marker-left: calc(#{px-to-rem($ouds-bullet-list-space-padding-inline-level-1)} - (var(--#{$prefix}bullet-list-fixed-left-padding) + #{px-to-rem($ouds-bullet-list-space-padding-inline-level-0)})); // stylelint-disable-line function-disallowed-list
      padding-left: calc(px-to-rem($ouds-bullet-list-space-padding-inline-level-1) - px-to-rem($ouds-bullet-list-space-padding-inline-level-0)); // stylelint-disable-line function-disallowed-list

      li {
        --#{$prefix}bullet-list-marker-left: calc(#{px-to-rem($ouds-bullet-list-space-padding-inline-level-2)} - (var(--#{$prefix}bullet-list-fixed-left-padding) + #{px-to-rem($ouds-bullet-list-space-padding-inline-level-1)})); // stylelint-disable-line function-disallowed-list
        padding-left: calc(px-to-rem($ouds-bullet-list-space-padding-inline-level-2) - px-to-rem($ouds-bullet-list-space-padding-inline-level-1)); // stylelint-disable-line function-disallowed-list
      }
    }
  }
}

// we need to use child combinator instead of descendant to handle mixed lists
ul.bullet-list {
  $bullet-list-marker-level-0: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><rect x='5' y='5' width='6' height='6'/></svg>");
  $bullet-list-marker-level-1: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><rect x='5' y='7' width='6' height='2'/></svg>");
  $bullet-list-marker-level-2: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><rect x='6.25' y='6.25' width='3.5' height='3.5'/></svg>");
  $bullet-list-tick-marker: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20'><path fill-rule='evenodd' d='m16.615 6.308-7.587 8.75c-.217.25-.55.41-.925.41s-.708-.16-.926-.41l-3.793-4.375a1.038 1.038 0 0 1-.26-.683c0-.302.133-.575.348-.773l.474-.438c.214-.198.51-.32.838-.32.294 0 .564.1.771.263l2.31 2.362 7.013-6.267c.212-.183.498-.296.811-.296.655 0 1.185.49 1.185 1.094 0 .259-.097.496-.26.683Z' clip-rule='evenodd'/></svg>");
  $bullet-list-empty-marker: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'></svg>");

  &.list-tick {
    --#{$prefix}bullet-list-custom-marker: #{$bullet-list-tick-marker};
  }

  &.list-bare {
    --#{$prefix}bullet-list-custom-marker: #{$bullet-list-empty-marker};
  }

  &.list-default-color {
    --#{$prefix}bullet-color: var(--#{$prefix}color-content-default);
  }

  // this is necessary in order to avoid duplicating :before definition in all descendant li and still handle mixed lists
  &:not(:has(ol)) li,
  > li {
    &::before {
      background-color: var(--#{$prefix}bullet-color, var(--#{$prefix}color-content-brand-primary));
      mask-image: var(--#{$prefix}bullet-list-custom-marker, $bullet-list-marker-level-0);
      mask-repeat: no-repeat;
      mask-position: center right;
      mask-size: var(--#{$prefix}bullet-list-icon-size);
    }

    > ul > li {
      &::before {
        mask-image: var(--#{$prefix}bullet-list-custom-marker, $bullet-list-marker-level-1);
      }

      > ul > li {
        &::before {
          mask-image: var(--#{$prefix}bullet-list-custom-marker, $bullet-list-marker-level-2);
        }
      }
    }
  }

}

ol.bullet-list {
  counter-reset: list;

  // this is necessary in order to avoid duplicating :before definition in all descendant li and still handle mixed lists
  &:not(:has(ul)) li,
  > li {
    counter-increment: list;

    &::before {
      text-align: right;
      content: counter(list) ".";
    }

    > ol {
      counter-reset: upper-alpha-list;
    }

    > ol > li {
      counter-increment: upper-alpha-list;

      &::before {
        content: counter(upper-alpha-list, upper-alpha) ".";
      }

      > ol {
        counter-reset: lower-alpha-list;
      }

      > ol > li {
        counter-increment: lower-alpha-list;

        &::before {
          content: counter(lower-alpha-list, lower-alpha) ".";
        }
      }
    }
  }
}
