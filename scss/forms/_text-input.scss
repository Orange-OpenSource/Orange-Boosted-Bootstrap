//
// Text input
//

%text-input-item {
  // scss-docs-start text-input-css-vars
  --#{$prefix}text-input-color: var(--#{$prefix}color-content-default);
  --#{$prefix}text-input-caret-color: var(--#{$prefix}color-content-default);
  --#{$prefix}text-input-background-color: var(--#{$prefix}color-action-support-enabled);
  --#{$prefix}text-input-border-color: #{$ouds-text-input-color-border-enabled};
  --#{$prefix}text-input-border-width-top: 0px;
  --#{$prefix}text-input-border-width-right: 0px;
  --#{$prefix}text-input-border-width-bottom: #{$ouds-text-input-border-width-default};
  --#{$prefix}text-input-border-width-left: 0px;
  --#{$prefix}text-input-border-width-focus: 0px;
  --#{$prefix}text-input-border-radius: #{$ouds-text-input-border-radius-default};
  --#{$prefix}text-input-padding-x: #{$ouds-text-input-space-padding-inline-default};
  --#{$prefix}text-input-padding-y: #{$ouds-text-input-space-padding-block-default};
  --#{$prefix}text-input-max-width: #{$ouds-text-input-size-max-width};
  --#{$prefix}text-input-min-height: #{$ouds-text-input-size-min-height};
  --#{$prefix}text-input-icon-size: #{$ouds-text-input-size-leading-icon};
  --#{$prefix}text-input-column-gap: #{$ouds-text-input-space-column-gap-default};
  --#{$prefix}text-input-column-row-gap: #{$ouds-text-input-space-row-gap-label-input};
  --#{$prefix}text-input-padding-x: #{$ouds-text-input-space-padding-inline-default};
  --#{$prefix}text-input-padding-y: #{$ouds-text-input-space-padding-block-default};
  --#{$prefix}text-input-trailing-action-width: #{$ouds-button-size-min-width};
  --#{$prefix}text-input-trailing-action-height: #{$ouds-button-size-max-height-icon-only};
  --#{$prefix}text-input-trailing-action-padding-right: #{$ouds-text-input-space-padding-inline-trailing-action};

  --#{$prefix}text-input-label-color: var(--#{$prefix}color-content-muted);
  --#{$prefix}text-input-helper-margin-top: #{$ouds-text-input-space-padding-block-top-helper-text};
  --#{$prefix}text-input-helper-color: var(--#{$prefix}color-content-muted);

  --#{$prefix}text-input-error-color: var(--#{$prefix}color-content-status-negative);
  --#{$prefix}text-input-invalid-icon: url("data:image/svg+xml,<svg viewBox='0 0 960 960' xmlns='http://www.w3.org/2000/svg'><path d='M500.5,74.75C265.088,74.75,74.249,265.59,74.249,501S265.088,927.25,500.5,927.25,926.751,736.412,926.751,501,735.912,74.75,500.5,74.75ZM460.578,237.1c10.208-10.906,23.587-16.481,39.92-17.04,16.319,0.559,29.7,6.134,39.907,17.04q16.134,17.256,16.149,48.079c0,15.088-21.166,292.627-26.357,303.885s-14.487,16.893-27.855,16.893c-0.666,0-1.2-.194-1.844-0.229-0.649.035-1.2,0.229-1.858,0.229q-20.05,0-27.842-16.893c-5.2-11.258-26.358-288.8-26.358-303.885Q444.44,254.357,460.578,237.1Zm79.273,529.988a56.906,56.906,0,0,1-38.99,14.85,58.393,58.393,0,0,1-39.535-14.675q-16.885-14.66-16.886-41.01,0-23.025,16.138-39.179t39.548-16.147q23.376,0,39.913,16.147a52.768,52.768,0,0,1,16.521,39.179Q556.56,752.232,539.851,767.088Z'/></svg>");
  // scss-docs-end text-input-css-vars
}

.text-input-container {
  @extend %text-input-item;
  position: relative;
  display: flex;
  flex-direction: column;
  gap: var(--#{$prefix}text-input-column-row-gap);
  justify-content: center;
  min-width: var(--#{$prefix}text-input-min-width);
  max-width: var(--#{$prefix}text-input-max-width);
  min-height: var(--#{$prefix}text-input-min-height);
  padding-top: subtract(var(--#{$prefix}text-input-padding-y), var(--#{$prefix}text-input-border-width-top));
  padding-right: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-right));
  padding-bottom: subtract(var(--#{$prefix}text-input-padding-y), var(--#{$prefix}text-input-border-width-bottom));
  padding-left: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-left));
  background-color: var(--#{$prefix}text-input-background-color);
  background-clip: padding-box;
  border-color: var(--#{$prefix}text-input-border-color);
  border-style: solid;
  border-width: var(--#{$prefix}text-input-border-width-top) var(--#{$prefix}text-input-border-width-right) var(--#{$prefix}text-input-border-width-bottom) var(--#{$prefix}text-input-border-width-left);
  @include get-font-size("label-large");
  @include border-radius(var(--#{$prefix}text-input-border-radius), 0);

  &.text-input-container-outlined {
    --#{$prefix}text-input-background-color: transparent;
    --#{$prefix}text-input-border-width-top: #{$ouds-text-input-border-width-default};
    --#{$prefix}text-input-border-width-right: #{$ouds-text-input-border-width-default};
    --#{$prefix}text-input-border-width-left: #{$ouds-text-input-border-width-default};
  }

  &.text-input-container-rounded {
    --#{$prefix}text-input-border-radius: #{$ouds-text-input-border-radius-rounded};
  }

  > label {
    z-index: 2;
    overflow: hidden;
    color: var(--#{$prefix}text-input-label-color);
    @include transition(font-size .1s ease-out);

    // Allow the whole text-input-container to be clickable to focus the input
    &::before {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      cursor: text;
      content: "";
      background-color: transparent;
    }
  }

  .text-input {
    position: absolute;
    top: 50%;
    left: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-left));
    z-index: 3;
    width: 100%;
    padding: 0;
    color: var(--#{$prefix}text-input-color);
    appearance: none;
    caret-color: var(--#{$prefix}text-input-caret-color);
    background-color: transparent;
    border: 0;
    box-shadow: none;
    opacity: 0;
    transform: translate(0, -50%);

    &:placeholder-shown:not([placeholder=""]),
    &[placeholder]:not(:placeholder-shown),
    &:focus,
    &:focus-visible {
      position: static;
      outline: 0;
      opacity: 1;
      transform: none;
    }
  }

  // Input prefix and suffix
  .input-container {
    position: absolute;
    top: 50%;
    left: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-left));
    z-index: 1;
    display: flex;
    gap: $ouds-text-input-space-column-gap-inline-text;
    align-items: center;
    align-self: stretch;
    padding: 0;
    opacity: 0;
    transform: translate(0, -50%);

    &:has(.text-input:placeholder-shown:not([placeholder=""])),
    &:has(.text-input[placeholder]:not(:placeholder-shown)),
    &:has(.text-input:focus),
    &:has(.text-input:focus-visible) {
      position: static;
      width: 100%;
      opacity: 1;
      transform: none;

    }
  }

  [data-bs-prefix] {
    &::before{
      display: block;
      color: var(--#{$prefix}color-content-muted);
      content: attr(data-bs-prefix);
    }
  }

  [data-bs-suffix] {
    &::after{
      display: block;
      color: var(--#{$prefix}color-content-muted);
      content: attr(data-bs-suffix);
    }
  }


  // Hover state styles
  &:hover:has(.text-input:not(:focus):not(:disabled):not(:read-only):not(.is-invalid)) {
    --#{$prefix}text-input-border-color: #{$ouds-text-input-color-border-hover};
    &:not(.text-input-container-outlined) {
      --#{$prefix}text-input-background-color: #{$ouds-color-action-support-hover};
    }
  }

  // Focused state styles
  &:has(.text-input:focus:not(:disabled):not(:read-only):not(.is-invalid)) {
    --#{$prefix}text-input-background-color: var(--#{$prefix}color-action-support-pressed);
    --#{$prefix}text-input-border-color: #{$ouds-text-input-color-border-focus};
    --#{$prefix}text-input-border-width-bottom: #{$ouds-text-input-border-width-focus};
    &.text-input-container-outlined {
      --#{$prefix}text-input-background-color: transparent;
      --#{$prefix}text-input-border-width-top: #{$ouds-text-input-border-width-focus};
      --#{$prefix}text-input-border-width-right: #{$ouds-text-input-border-width-focus};
      --#{$prefix}text-input-border-width-left: #{$ouds-text-input-border-width-focus};
    }
  }

  &:has(.text-input:placeholder-shown:not([placeholder=""])),
  &:has(.text-input[placeholder]:not(:placeholder-shown)),
  &:has(.text-input:focus) {
    > label {
      text-overflow: ellipsis;
      white-space: nowrap;
      @include get-font-size("label-small");
    }
  }

  // Prevent label flickering when input already focused
  &:has(.text-input:focus) {
    > label {
      pointer-events: none;
    }
  }

  // Read only inputs
  &:has(.text-input:read-only:not(:disabled)) {
    --#{$prefix}text-input-background-color: transparent;
    --#{$prefix}text-input-border-color: #{$ouds-color-border-muted};
    --#{$prefix}text-input-border-width-top: #{$ouds-text-input-border-width-default};
    --#{$prefix}text-input-border-width-right: #{$ouds-text-input-border-width-default};
    --#{$prefix}text-input-border-width-left: #{$ouds-text-input-border-width-default};

    &.text-input-container-outlined {
      --#{$prefix}text-input-background-color: var(--#{$prefix}color-action-support-disabled);
      --#{$prefix}text-input-border-width-top: 0px;
      --#{$prefix}text-input-border-width-right: 0px;
      --#{$prefix}text-input-border-width-bottom: 0px;
      --#{$prefix}text-input-border-width-left: 0px;
    }

    outline: 0;
  }

  // Disabled inputs
  &:has(.text-input:disabled) {
    --#{$prefix}text-input-color: var(--#{$prefix}color-action-disabled);
    --#{$prefix}text-input-border-color: var(--#{$prefix}color-action-disabled);
    &:not(.text-input-container-outlined) {
      --#{$prefix}text-input-background-color: var(--#{$prefix}color-action-support-disabled);
    }

    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  // Leading icon
  > img,
  > svg {
    position: absolute;
    top: subtract(var(--#{$prefix}text-input-min-height) / 2, var(--#{$prefix}text-input-icon-size) / 2);
    left: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-left));
    z-index: 2;
    width: var(--#{$prefix}text-input-icon-size);
    min-width: var(--#{$prefix}text-input-icon-size);
    height: var(--#{$prefix}text-input-icon-size);
  }

  &:has(> svg),
  &:has(> img) {
    > .text-input,
    > .input-container,
    > label {
      padding-left: add(var(--#{$prefix}text-input-icon-size), var(--#{$prefix}text-input-column-gap));
    }
  }

  // Trailing action
  > button {
    position: absolute;
    top: subtract(var(--#{$prefix}text-input-min-height) / 2, var(--#{$prefix}text-input-trailing-action-height) / 2);
    right: subtract(var(--#{$prefix}text-input-trailing-action-padding-right), var(--#{$prefix}text-input-border-width-left));
    z-index: 2;
  }

  &:has(> button) {
    padding-right: subtract(var(--#{$prefix}text-input-trailing-action-padding-right), var(--#{$prefix}text-input-border-width-left));

    > .text-input,
    > .input-container,
    > label {
      padding-right: add(var(--#{$prefix}text-input-trailing-action-width), var(--#{$prefix}text-input-column-gap));
    }
  }

  // Invalid text inputs
  &:has(.text-input.is-invalid) {
    --#{$prefix}text-input-border-color: var(--#{$prefix}color-action-negative-enabled);
    --#{$prefix}text-input-label-color: var(--#{$prefix}color-action-negative-enabled);

    .text-input,
    .input-container,
    label {
      padding-right: add(var(--#{$prefix}text-input-trailing-action-width), var(--#{$prefix}text-input-column-gap));
    }

    &:has(> button) {
      .text-input,
      .input-container,
      label {
        padding-right: add(add($ouds-button-size-icon-only, var(--#{$prefix}text-input-column-gap)), add(var(--#{$prefix}text-input-trailing-action-width), var(--#{$prefix}text-input-column-gap)));
      }
    }


    &::after {
      position: absolute;
      top: 50%;
      right: subtract(var(--#{$prefix}text-input-trailing-action-padding-right), var(--#{$prefix}text-input-border-width-left));
      width: var(--#{$prefix}text-input-trailing-action-width);
      height: var(--#{$prefix}text-input-trailing-action-height);
      overflow: hidden;
      font-size: px-to-rem($ouds-button-size-icon-only);
      line-height: 1;
      color: var(--#{$prefix}text-input-label-color);
      content: "";
      background-color: currentcolor;
      mask: escape-svg(var(--#{$prefix}text-input-invalid-icon)) no-repeat 50% / px-to-rem($ouds-button-size-icon-only);
      transform: translateY(-50%);
    }

    &:has(> button)::after {
      right: subtract(add(add(var(--#{$prefix}text-input-trailing-action-padding-right), var(--#{$prefix}text-input-trailing-action-width)), var(--#{$prefix}text-input-column-gap)), var(--#{$prefix}text-input-border-width-left));
      width: $ouds-button-size-icon-only;
    }

    &:not(.text-input-container-outlined) {
      --#{$prefix}text-input-background-color: var(--#{$prefix}color-surface-status-negative-muted);
    }

    &:hover {
      --#{$prefix}text-input-border-color: var(--#{$prefix}color-action-negative-hover);
      --#{$prefix}text-input-label-color: var(--#{$prefix}color-action-negative-hover);
    }
  }

  &:has(.text-input:focus.is-invalid) {
    --#{$prefix}text-input-border-color: var(--#{$prefix}color-action-negative-pressed);
    --#{$prefix}text-input-label-color: var(--#{$prefix}color-action-negative-pressed);
    --#{$prefix}text-input-caret-color: var(--#{$prefix}color-action-negative-pressed);
  }
}

// Shared styles for helper and error messages
%text-input-message {
  @extend %text-input-item;
  max-width: var(--#{$prefix}text-input-max-width);
  padding-right: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-right));
  padding-left: subtract(var(--#{$prefix}text-input-padding-x), var(--#{$prefix}text-input-border-width-left));
  @include get-font-size("label-medium");
}

// Helper text and helper link
.text-input-container ~ .text-input-helper {
  @extend %text-input-message;
  margin-top: var(--#{$prefix}text-input-helper-margin-top);
  color: var(--#{$prefix}text-input-helper-color);
}

.text-input-container ~ .link {
  @extend %text-input-message;
}

.text-input-container:has(.text-input.is-invalid):has(~ .text-input-error) ~ .text-input-helper {
  display: none;
}

// Text input error message
.text-input-container ~ .text-input-error {
  @extend %text-input-message;
  display: none;
  margin-top: var(--#{$prefix}text-input-helper-margin-top);
  color: var(--#{$prefix}text-input-error-color);
}

.text-input-container:has(.text-input.is-invalid) ~ .text-input-error {
  display: flex;
}
