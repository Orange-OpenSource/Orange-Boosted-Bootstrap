//
// Base styles
//

.btn {
  // scss-docs-start btn-css-vars
  --#{$prefix}btn-padding-x: #{$btn-padding-x};
  --#{$prefix}btn-padding-y: #{$btn-padding-y};
  --#{$prefix}btn-font-family: #{$btn-font-family};
  @include rfs($btn-font-size, --#{$prefix}btn-font-size);
  --#{$prefix}btn-font-weight: #{$btn-font-weight};
  --#{$prefix}btn-line-height: #{$btn-line-height};
  --#{$prefix}btn-color: #{$btn-color};
  --#{$prefix}btn-letter-spacing: #{$btn-letter-spacing}; // OUDS mod
  --#{$prefix}btn-bg: transparent;
  --#{$prefix}btn-border-width: #{$btn-border-width};
  --#{$prefix}btn-border-color: transparent;
  --#{$prefix}btn-border-radius: #{$btn-border-radius};
  --#{$prefix}btn-hover-color: #{$btn-hover-color}; // OUDS mod
  --#{$prefix}btn-hover-border-color: initial; // OUDS mod
  --#{$prefix}btn-box-shadow: #{$btn-box-shadow};
  --#{$prefix}btn-disabled-opacity: #{$btn-disabled-opacity};
  --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} var(--#{$prefix}btn-focus-shadow-rgb); // OUDS mod
  --#{$prefix}icon-spacing: #{$btn-icon-padding-x}; // OUDS mod
  // scss-docs-end btn-css-vars

  display: inline-flex; // OUDS mod
  align-items: center; // OUDS mod: for .badge proper alignment
  justify-content: center; // OUDS mod
  padding: subtract(var(--#{$prefix}btn-padding-y), 1px) var(--#{$prefix}btn-padding-x) add(var(--#{$prefix}btn-padding-y), 1px); // OUDS mod
  font-family: var(--#{$prefix}btn-font-family);
  @include font-size(var(--#{$prefix}btn-font-size));
  font-weight: var(--#{$prefix}btn-font-weight);
  line-height: var(--#{$prefix}btn-line-height);
  color: var(--#{$prefix}btn-color);
  text-decoration: if($link-decoration == none, null, none);
  letter-spacing: var(--#{$prefix}btn-letter-spacing); // OUDS mod
  white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-button-pointers, pointer, null);
  user-select: none;
  border: var(--#{$prefix}btn-border-width) solid var(--#{$prefix}btn-border-color);
  @include border-radius(var(--#{$prefix}btn-border-radius));
  @include gradient-bg(var(--#{$prefix}btn-bg));
  @include box-shadow(var(--#{$prefix}btn-box-shadow));
  @include transition($btn-transition);

  &:hover {
    color: var(--#{$prefix}btn-hover-color);
    text-decoration: if($link-hover-decoration == underline, none, null);
    background-color: var(--#{$prefix}btn-hover-bg);
    border-color: var(--#{$prefix}btn-hover-border-color);
  }

  // OUDS mod: no .btn-check + &:hover

  // OUDS mod: no &:focus-visible to avoid issue in button tags

  // OUDS mod: no .btn-check:focus-visible + &

  // OUDS mod: selectors are slightly different to handle `.btn-check:checked`
  .btn-check:checked + &:active,
  .btn-check:checked + &,
  &:active,
  &.active,
  &.show {
    color: var(--#{$prefix}btn-active-color);
    background-color: var(--#{$prefix}btn-active-bg);
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$prefix}btn-active-border-color);
    // OUDS mod: no box shadow modification for the active state
    // OUDS mod: no &:focus-visible
  }
  // End mod

  // OUDS mod: no `.btn-check:checked:focus-visible + &` to handle box shadow

  // OUDS mod: selectors are slightly different to handle `.btn-check`
  .btn-check:disabled + &,
  &:disabled,
  &.disabled,
  fieldset:disabled & {
    color: var(--#{$prefix}btn-disabled-color);
    pointer-events: none;
    background-color: var(--#{$prefix}btn-disabled-bg);
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$prefix}btn-disabled-border-color);
    opacity: var(--#{$prefix}btn-disabled-opacity);
    @include box-shadow(none);
  }
  // End mod

  // OUDS mod: with icon
  &:not(.btn-icon) > svg {
    transform: translateY(1px);
  }
  // End mod
}


//
// Alternate buttons
//

// scss-docs-start btn-variant-loops
.btn-primary {
  @include button-variant($ouds-color-orange-500, $ouds-color-orange-500, $black, $active-background: var(--#{$prefix}highlight-color), $active-border: var(--#{$prefix}border-color), $active-color: var(--#{$prefix}body-color));
}

.btn-success {
  @include button-variant(var(--#{$prefix}success), var(--#{$prefix}success), var(--#{$prefix}highlight-color));
}

.btn-danger {
  @include button-variant(var(--#{$prefix}danger), var(--#{$prefix}danger), var(--#{$prefix}highlight-color));
}

.btn-warning {
  @include button-variant($warning, $warning, $black);
}

.btn-info {
  @include button-variant(var(--#{$prefix}info), var(--#{$prefix}info), var(--#{$prefix}highlight-color));
}

.btn-light {
  @include button-variant($light, $light, $black);
}

.btn-dark {
  @include button-variant($dark, $dark, $white, $hover-background: $white, $hover-border: var(--#{$prefix}border-color), $hover-color: $black);
}

.btn-secondary {
  @include button-variant(var(--#{$prefix}secondary), var(--#{$prefix}secondary), var(--#{$prefix}highlight-color), $hover-background: var(--#{$prefix}highlight-color), $hover-border: var(--#{$prefix}border-color), $hover-color: var(--#{$prefix}body-color));
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    $btn-outline-hover-color: var(--#{$prefix}highlight-color);
    @if index(("primary", "warning", "light"), #{$color}) {
      $btn-outline-hover-color: $black;
    } @else if (#{$color} == "dark") {
      $btn-outline-hover-color: $white;
    }
    @include button-outline-variant(var(--#{$prefix}#{$color}), $btn-outline-hover-color);
  }
}
// scss-docs-end btn-variant-loops

// OUDS mod: OUDS Web-specific no outline button
.btn-no-outline {
  @include button-variant(transparent, transparent, var(--#{$prefix}body-color), transparent, var(--#{$prefix}color-border-emphasized), var(--#{$prefix}body-color), transparent, var(--#{$prefix}color-border-emphasized), var(--#{$prefix}primary), transparent, transparent, var(--#{$prefix}color-content-disabled));

  .btn-check:checked + &.btn {
    border-color: transparent;

    &:hover {
      border-color: var(--#{$prefix}btn-hover-border-color);
    }
  }
}
// End mod


// OUDS mod: OUDS Web-specific toggle button
.btn-toggle {
  @include button-variant(transparent, var(--#{$prefix}color-border-emphasized), var(--#{$prefix}body-color), transparent, var(--#{$prefix}color-border-emphasized), var(--#{$prefix}primary), $ouds-color-orange-500, $ouds-color-orange-500, $black, transparent, var(--#{$prefix}color-border-emphasized), var(--#{$prefix}color-content-disabled));

  .btn-check:checked + & {
    color: var(--#{$prefix}highlight-color);
    background-color: var(--#{$prefix}highlight-bg);
    border-color: var(--#{$prefix}border-color);
  }

  .btn-group .btn-check + &.btn:not(:first-of-type) {
    border-left: 0;

    &::before {
      display: inline-block;
      width: var(--#{$prefix}btn-border-width);
      height: 100%;
      content: "";
    }
  }

  .btn-group .btn-check + &.btn:not(:last-of-type) {
    border-right: 0;

    &::after {
      display: inline-block;
      width: var(--#{$prefix}btn-border-width);
      height: 100%;
      content: "";
    }
  }
}
// End mod


// OUDS mod: OUDS Web-specific dropdown button
.btn-dropdown {
  @include button-variant(var(--#{$prefix}body-bg), var(--#{$prefix}color-border-emphasized), var(--#{$prefix}body-color), var(--#{$prefix}body-bg), var(--#{$prefix}color-border-emphasized), var(--#{$prefix}body-color), var(--#{$prefix}body-bg), var(--#{$prefix}body-color), var(--#{$prefix}body-color), var(--#{$prefix}body-bg), var(--#{$prefix}color-content-disabled), var(--#{$prefix}color-content-disabled));
}
// End mod


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  // OUDS mod: no redefinition of --#{$prefix}btn-font-weight
  --#{$prefix}btn-color: #{$btn-link-color};
  --#{$prefix}btn-bg: transparent;
  --#{$prefix}btn-border-color: transparent;
  --#{$prefix}btn-hover-color: #{$btn-link-hover-color};
  --#{$prefix}btn-hover-border-color: transparent;
  --#{$prefix}btn-active-color: var(--#{$prefix}btn-hover-color); // OUDS mod
  --#{$prefix}btn-active-border-color: transparent;
  --#{$prefix}btn-disabled-color: #{$btn-link-disabled-color};
  --#{$prefix}btn-disabled-border-color: transparent;
  --#{$prefix}btn-box-shadow: 0 0 0 #{$black}; // Can't use `none` as keyword negates all values when used with multiple shadows
  // OUDS mod: no redefinition of --#{$prefix}btn-focus-shadow-rgb

  text-decoration: $link-decoration;
  @if $enable-gradients {
    background-image: none;
  }

  &:hover,
  &:focus-visible {
    text-decoration: $link-hover-decoration;
  }

  // OUDS mod: no focus-visible color change

  // No need for an active state here
}


//
// Button Sizes
// OUDS mod: 6th argument to set .btn-icon padding
// OUDS mod: 7th argument to set .btn-letter-spacing

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-border-radius-lg, $btn-line-height-lg, $btn-icon-padding-x-lg, $btn-letter-spacing-lg);
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm, $btn-line-height-sm, $btn-icon-padding-x-sm, $btn-letter-spacing-sm);
}


// OUDS mod: icon button
.btn-icon {
  padding: var(--#{$prefix}icon-spacing);
}
// End mod

// OUDS mod: social button
.btn-social {
  --#{$prefix}btn-border-color: currentcolor;
  --#{$prefix}btn-hover-color: #{$white};
  --#{$prefix}btn-hover-bg: var(--#{$prefix}network-color, #{$black});
  --#{$prefix}btn-hover-border-color: var(--#{$prefix}network-color, #{$black});
  --#{$prefix}btn-active-color: var(--#{$prefix}highlight-color);
  --#{$prefix}btn-active-bg: var(--#{$prefix}highlight-bg);
  --#{$prefix}btn-active-border-color: var(--#{$prefix}border-color);
  --#{$prefix}btn-disabled-color: var(--#{$prefix}color-content-disabled);
  --#{$prefix}btn-disabled-bg: transparent;
  @include border-radius(50%, 50%);
  @include button-icon(var(--#{$prefix}network-logo));
}

@each $name in map-keys($btn-social-networks) {
  $network: map-get($btn-social-networks, $name);

  .btn-#{$name} {
    --#{$prefix}network-color: #{map-get($network, "color")};
    --#{$prefix}network-logo: #{escape-svg(url("data:image/svg+xml,#{map-get($network, "icon")}"))};

    &::before {
      mask-size: if(map-has-key($network, "size"), map-get($network, "size"), null);

      @if "linkedin" == $name {
        transform: translateY(-1px);
      }
    }
  }
}
// End mod
